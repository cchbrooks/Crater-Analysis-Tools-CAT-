# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2024-08-15 12:58:54
"""
import arcpy
from arcpy.sa import *
from arcpy.sa import *
from sys import argv

#For inline variable substitution, parameters passed as a String are evaluated using locals(), globals() and isinstance(). To override, substitute values directly.
def Model2(Crater_Polygon="Crat_Poly2_Final6", Slope_Zonal_Stats_xlsx="%folder%\\Slope_Zonal_Stats.xlsx", Basin_Zonal_Stats_xlsx="%folder%\\Basin_Zonal_Stats.xlsx", Data_Raster="WAC_TIO2_E350N0450.IMG_Band_1", Folder="C:\\Users\\chris\\OneDrive\\Documents\\ArcGIS\\Projects\\New_Analysis2\\..\\..\\..\\..\\Documents\\Thesis_Test2"):  # Model2

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("3D")
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageExt")
    arcpy.CheckOutExtension("ImageAnalyst")

    arcpy.ImportToolbox(r"c:\program files\arcgis\pro\Resources\ArcToolbox\toolboxes\Conversion Tools.tbx")

    # Process: Minimum Bounding Geometry (2) (Minimum Bounding Geometry) (management)
    MBG_Output_shp_2_ = "%folder%\\MBG_Output.shp"
    arcpy.management.MinimumBoundingGeometry(in_features=Crater_Polygon.__str__().format(**locals(),**globals())if isinstance(Crater_Polygon, str) else Crater_Polygon, out_feature_class=MBG_Output_shp_2_, geometry_type="CIRCLE", mbg_fields_option="MBG_FIELDS")

    # Process: Simplify Polygon (Simplify Polygon) (cartography)
    MBG_Simple_Output_shp = "%folder%\\MBG__Simple_Output.shp"
    with arcpy.EnvManager(transferGDBAttributeProperties=False):
        MBG_Simple_Output_Pnt_shp = arcpy.cartography.SimplifyPolygon(in_features=MBG_Output_shp_2_, out_feature_class=MBG_Simple_Output_shp, algorithm="POINT_REMOVE", tolerance="10 Meters")[0]

    # Process: External Slope Calculator (Calculate Field) (management)
    Crat_Poly2_Fin_SimplifyPolyg1_2_ = arcpy.management.CalculateField(in_table=MBG_Simple_Output_shp, field="Slope", expression="round(!MBG_Diamet! / 2, 3)")[0]

    # Process: Internal Basin Calculator (Calculate Field) (management)
    Crat_Poly2_Fin_SimplifyPolyg1_3_ = arcpy.management.CalculateField(in_table=Crat_Poly2_Fin_SimplifyPolyg1_2_, field="Basin", expression="round(!MBG_Diamet! * -0.15, 3)")[0]

    # Process: Slope Buffer (Buffer) (analysis)
    Crat_Poly2_Fin_Simpli_Buffer2 = "%folder%\\External_Slope.shp"
    arcpy.analysis.Buffer(in_features=Crat_Poly2_Fin_SimplifyPolyg1_3_, out_feature_class=Crat_Poly2_Fin_Simpli_Buffer2, buffer_distance_or_field="Slope", line_side="OUTSIDE_ONLY")

    # Process: Zonal Statistics as Table (Zonal Statistics as Table) (sa)
    Slope_Zonal_Stats = "%folder%\\Slope_Zonal_Stats"
    Output_Join_Layer = ""
    arcpy.sa.ZonalStatisticsAsTable(Crat_Poly2_Fin_Simpli_Buffer2, "ORIG_FID", Data_Raster.__str__().format(**locals(),**globals())if isinstance(Data_Raster, str) else Data_Raster, Slope_Zonal_Stats, "DATA", "MIN_MAX_MEAN", "CURRENT_SLICE", [90], "AUTO_DETECT", "ARITHMETIC", 360, Output_Join_Layer)
    .save(Zonal_Statistics_as_Table)


    # Process: Basin Buffer (Buffer) (analysis)
    Crat_Poly2_Fin_Simpli_Buffer3 = "%folder%\\Internal_Basin.shp"
    arcpy.analysis.Buffer(in_features=Crat_Poly2_Fin_SimplifyPolyg1_3_, out_feature_class=Crat_Poly2_Fin_Simpli_Buffer3, buffer_distance_or_field="Basin")

    # Process: Zonal Statistics as Table (2) (Zonal Statistics as Table) (sa)
    Basin_Zonal_Stats = "%folder%\\Basin_Zonal_Stats"
    Output_Join_Layer_2_ = ""
    arcpy.sa.ZonalStatisticsAsTable(Crat_Poly2_Fin_Simpli_Buffer3, "ORIG_FID", Data_Raster.__str__().format(**locals(),**globals())if isinstance(Data_Raster, str) else Data_Raster, Basin_Zonal_Stats, "DATA", "MIN_MAX_MEAN", "CURRENT_SLICE", [90], "AUTO_DETECT", "ARITHMETIC", 360, Output_Join_Layer_2_)
    .save(Zonal_Statistics_as_Table_2_)


    # Process: Table To Excel (Table To Excel) (conversion)
    arcpy.conversion.TableToExcel(Input_Table=[Slope_Zonal_Stats], Output_Excel_File=Slope_Zonal_Stats_xlsx.__str__().format(**locals(),**globals())if isinstance(Slope_Zonal_Stats_xlsx, str) else Slope_Zonal_Stats_xlsx)

    # Process: Table To Excel (2) (Table To Excel) (conversion)
    arcpy.conversion.TableToExcel(Input_Table=[Basin_Zonal_Stats], Output_Excel_File=Basin_Zonal_Stats_xlsx.__str__().format(**locals(),**globals())if isinstance(Basin_Zonal_Stats_xlsx, str) else Basin_Zonal_Stats_xlsx)

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace="C:\\Users\\chris\\OneDrive\\Documents\\ArcGIS\\Projects\\New_Analysis2\\Default.gdb", workspace="C:\\Users\\chris\\OneDrive\\Documents\\ArcGIS\\Projects\\New_Analysis2\\Default.gdb"):
        Model2(*argv[1:])

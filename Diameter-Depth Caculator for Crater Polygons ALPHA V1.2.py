# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2024-08-14 23:01:11
"""
import arcpy
from arcpy.sa import *
from sys import argv

#For inline variable substitution, parameters passed as a String are evaluated using locals(), globals() and isinstance(). To override, substitute values directly.
def Model1(Crater_Polygon, DTM_DEM, Depth_Table, Diameter_Table):  

    # Allow overwriting outputs
    arcpy.env.overwriteOutput = True

    # Check out necessary licenses
    arcpy.CheckOutExtension("3D")
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageExt")
    arcpy.CheckOutExtension("ImageAnalyst")

    # Ensure the workspace is set
    arcpy.env.workspace = arcpy.env.scratchWorkspace

    # Process: Minimum Bounding Geometry (MBG) to calculate crater diameters
    Crat_Poly2_Fin_MinimumBoundi = "MBG_Crater_Poly"
    arcpy.management.MinimumBoundingGeometry(
        in_features=Crater_Polygon, 
        out_feature_class=Crat_Poly2_Fin_MinimumBoundi, 
        geometry_type="CIRCLE", 
        mbg_fields_option="MBG_FIELDS"
    )

    # Process: Zonal Statistics as Table to extract min/max depth from DTM
    ZonalSt_Crat_Po1 = "Zonal_Stats_Crater"
    arcpy.sa.ZonalStatisticsAsTable(
        in_zone_data=Crat_Poly2_Fin_MinimumBoundi, 
        zone_field="ORIG_FID", 
        in_value_raster=DTM_DEM, 
        out_table=ZonalSt_Crat_Po1, 
        statistics_type="MIN_MAX", 
        ignore_nodata="DATA"
    )

    # Process: Export the Depth Table
    arcpy.conversion.ExportTable(
        in_table=ZonalSt_Crat_Po1, 
        out_table=Depth_Table
    )

    # Process: Export the Diameter Table
    arcpy.conversion.ExportTable(
        in_table=Crat_Poly2_Fin_MinimumBoundi, 
        out_table=Diameter_Table
    )

if __name__ == '__main__':
    # Global Environment settings, replace hardcoded paths with variables for workspace
    workspace = argv[1] if len(argv) > 1 else arcpy.env.scratchWorkspace
    arcpy.env.workspace = workspace
    arcpy.env.scratchWorkspace = workspace
    
    # Run the model with passed parameters
    Model1(*argv[2:])

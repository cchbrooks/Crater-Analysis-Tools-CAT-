# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2024-08-15 23:40:23
"""
import arcpy
from arcpy.sa import *

def CraterDetectionModel(Input_DTM_DEM, Upper_Threshold, Lower_Threshold, Output_Workspace):
    # Set environment to allow overwriting and user-defined workspace
    arcpy.env.overwriteOutput = True
    arcpy.env.workspace = Output_Workspace
    arcpy.env.scratchWorkspace = Output_Workspace

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("3D")
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageAnalyst")

    # Process: Slope (Calculating Slope based on input DTM/DEM)
    Slope_Raster = arcpy.sa.Slope(Input_DTM_DEM, "DEGREE", 1, "PLANAR", "METER", "GPU_THEN_CPU")
    Slope_Raster.save(f"{Output_Workspace}/Slope_Raster")

    # Process: Raster Calculator (Selecting slopes within the specified thresholds)
    Calculated_Slope_Raster = (Slope_Raster <= float(Upper_Threshold)) & (Slope_Raster >= float(Lower_Threshold))
    Calculated_Slope_Raster.save(f"{Output_Workspace}/Calculated_Slope_Raster")

    # Process: Reclassify (Reclassify the selected slopes)
    Reclassified_Raster = arcpy.sa.Reclassify(Calculated_Slope_Raster, "VALUE", "", "DATA")
    Reclassified_Raster.save(f"{Output_Workspace}/Reclassified_Raster")

    # Process: Con (Selecting values equal to 1 from the reclassified raster)
    Con_Reclass = arcpy.sa.Con(Reclassified_Raster, Reclassified_Raster, "", "Value = 1")
    Con_Reclass.save(f"{Output_Workspace}/Con_Reclassified_Raster")

    # Process: Raster to Polygon (Converting the Con raster output to polygons)
    Output_Polygon_Features = f"{Output_Workspace}/Crater_Slope_Polygon"
    with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
        arcpy.conversion.RasterToPolygon(in_raster=Con_Reclass, out_polygon_features=Output_Polygon_Features)

    return Output_Polygon_Features

if __name__ == '__main__':
    # Script parameters (these should be set via the ArcGIS Model or Script Tool interface)
    Input_DTM_DEM = arcpy.GetParameterAsText(0)  # DEM/DTM input
    Upper_Threshold = arcpy.GetParameterAsText(1)  # Upper slope threshold
    Lower_Threshold = arcpy.GetParameterAsText(2)  # Lower slope threshold
    Output_Workspace = arcpy.GetParameterAsText(3)  # Output workspace (directory)

    # Run the crater detection model
    output_polygons = CraterDetectionModel(Input_DTM_DEM, Upper_Threshold, Lower_Threshold, Output_Workspace)
    
    # Set the output
    arcpy.SetParameterAsText(4, output_polygons)
